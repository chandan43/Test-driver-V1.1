!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEVICE_NAME	blk_drv.c	11;"	d	file:
DEVICE_NAME	ramblk_drv.c	13;"	d	file:
Dev	blk_drv.c	/^}Dev;$/;"	t	typeref:struct:blk_dev	file:
Dev	ramblk_drv.c	/^}Dev;$/;"	t	typeref:struct:blk_dev	file:
KDIR	Makefile	/^KDIR=\/lib\/modules\/$(shell uname -r)\/build$/;"	m
KERNEL_SECTOR_SIZE	blk_drv.c	12;"	d	file:
KERNEL_SECTOR_SIZE	ramblk_drv.c	14;"	d	file:
MBR_DISK_SIGNATURE_OFFSET	ram.h	3;"	d
MBR_DISK_SIGNATURE_SIZE	ram.h	4;"	d
MBR_SIGNATURE	ram.h	10;"	d
MBR_SIGNATURE_OFFSET	ram.h	8;"	d
MBR_SIGNATURE_SIZE	ram.h	9;"	d
MBR_SIZE	ram.h	2;"	d
MINOR_NO	blk_drv.c	13;"	d	file:
MINOR_NO	ramblk_drv.c	15;"	d	file:
PARTITION_ENTRY_SIZE	ram.h	6;"	d
PARTITION_TABLE_OFFSET	ram.h	5;"	d
PARTITION_TABLE_SIZE	ram.h	7;"	d
PartitionEntry	ram.h	/^}PartitionEntry;$/;"	t	typeref:struct:__anon1
PartitionTable	ram.h	/^typedef PartitionEntry PartitionTable[4];$/;"	t
Queue	blk_drv.c	/^	struct request_queue *Queue;$/;"	m	struct:blk_dev	typeref:struct:blk_dev::request_queue	file:
Queue	ramblk_drv.c	/^	struct request_queue *Queue;$/;"	m	struct:blk_dev	typeref:struct:blk_dev::request_queue	file:
SECTOR_SIZE	ram.h	1;"	d
abs_start_sec	ram.h	/^    unsigned long abs_start_sec;                      \/* Relative Sector (to start of partition -- also equals the partition's starting LBA value)*\/$/;"	m	struct:__anon1
blk_dev	blk_drv.c	/^typedef struct blk_dev{$/;"	s	file:
blk_dev	ramblk_drv.c	/^typedef struct blk_dev{$/;"	s	file:
blkdrv_exit	blk_drv.c	/^module_exit(blkdrv_exit);$/;"	v
blkdrv_exit	blk_drv.c	/^static void __exit blkdrv_exit(void){$/;"	f	file:
blkdrv_exit	ramblk_drv.c	/^module_exit(blkdrv_exit);$/;"	v
blkdrv_exit	ramblk_drv.c	/^static void __exit blkdrv_exit(void){$/;"	f	file:
blkdrv_fops	blk_drv.c	/^static const struct block_device_operations blkdrv_fops = {$/;"	v	typeref:struct:block_device_operations	file:
blkdrv_fops	ramblk_drv.c	/^static const struct block_device_operations blkdrv_fops = {$/;"	v	typeref:struct:block_device_operations	file:
blkdrv_getgeo	blk_drv.c	/^static int blkdrv_getgeo(struct block_device *blk_dev, struct hd_geometry *geo){$/;"	f	file:
blkdrv_getgeo	ramblk_drv.c	/^static int blkdrv_getgeo(struct block_device *blk_dev, struct hd_geometry *geo){$/;"	f	file:
blkdrv_init	blk_drv.c	/^module_init(blkdrv_init);$/;"	v
blkdrv_init	blk_drv.c	/^static int blkdrv_init(void){$/;"	f	file:
blkdrv_init	ramblk_drv.c	/^module_init(blkdrv_init);$/;"	v
blkdrv_init	ramblk_drv.c	/^static int blkdrv_init(void){$/;"	f	file:
blkdrv_open	blk_drv.c	/^static int blkdrv_open(struct block_device *blk_dev, fmode_t mode){$/;"	f	file:
blkdrv_open	ramblk_drv.c	/^static int blkdrv_open(struct block_device *blk_dev, fmode_t mode){$/;"	f	file:
blkdrv_release	blk_drv.c	/^static void blkdrv_release(struct gendisk *gd, fmode_t mode){$/;"	f	file:
blkdrv_release	ramblk_drv.c	/^static void blkdrv_release(struct gendisk *gd, fmode_t mode){$/;"	f	file:
blkdrv_req	blk_drv.c	/^static void blkdrv_req(struct request_queue *q){$/;"	f	file:
blkdrv_req	ramblk_drv.c	/^static void blkdrv_req(struct request_queue *q){$/;"	f	file:
blkdrv_transfer	blk_drv.c	/^static void blkdrv_transfer(Dev *dev,sector_t sector,unsigned long nsector,char *buffer,int write){$/;"	f	file:
blkdrv_transfer	ramblk_drv.c	/^static void blkdrv_transfer(Dev *dev,sector_t sector,unsigned long nsector,char *buffer,int write){$/;"	f	file:
boot_type	ram.h	/^    unsigned char boot_type; 			      \/* 0x00 - Inactive; 0x80 - Active (Bootable) *\/$/;"	m	struct:__anon1
data	blk_drv.c	/^	u8 *data;$/;"	m	struct:blk_dev	file:
data	ramblk_drv.c	/^	u8 *data;$/;"	m	struct:blk_dev	file:
deff_partition_table	ram.h	/^static PartitionTable deff_partition_table =$/;"	v
dev	blk_drv.c	/^Dev *dev;$/;"	v
dev	ramblk_drv.c	/^Dev *dev;$/;"	v
end_cyl	ram.h	/^    unsigned char end_cyl;                            \/* 10 bits Ending Cylinder*\/$/;"	m	struct:__anon1
end_cyl_hi	ram.h	/^    unsigned char end_cyl_hi:2;                       \/* 6 bits  Ending Sector (Bits 6-7 are the upper two bits for the ending cylinder field)*\/$/;"	m	struct:__anon1
end_head	ram.h	/^    unsigned char end_head;                           \/* Ending Head*\/$/;"	m	struct:__anon1
end_sec	ram.h	/^    unsigned char end_sec:6;                          \/* 6 bits  Ending Sector (Bits 6-7 are the upper two bits for the ending cylinder field)*\/$/;"	m	struct:__anon1
gd	blk_drv.c	/^	struct gendisk *gd;$/;"	m	struct:blk_dev	typeref:struct:blk_dev::gendisk	file:
gd	ramblk_drv.c	/^	struct gendisk *gd;$/;"	m	struct:blk_dev	typeref:struct:blk_dev::gendisk	file:
lock	blk_drv.c	/^	spinlock_t lock;$/;"	m	struct:blk_dev	file:
lock	ramblk_drv.c	/^	spinlock_t lock;$/;"	m	struct:blk_dev	file:
logical_block_size	blk_drv.c	/^static int logical_block_size=512;$/;"	v	file:
logical_block_size	ramblk_drv.c	/^static int logical_block_size=512;$/;"	v	file:
majornumber	blk_drv.c	/^static int majornumber=0;$/;"	v	file:
majornumber	ramblk_drv.c	/^static int majornumber=0;$/;"	v	file:
nsector	blk_drv.c	/^static int nsector=1024;$/;"	v	file:
nsector	ramblk_drv.c	/^static int nsector=1024;$/;"	v	file:
obj-m	Makefile	/^obj-m:=ramblk_drv.o$/;"	m
part_type	ram.h	/^    unsigned char part_type;                          \/* System ID : Follow Note: section  ,LINUX: 0x83 *\/$/;"	m	struct:__anon1
sec_in_part	ram.h	/^    unsigned long sec_in_part;                        \/* Total Sectors in partition *\/$/;"	m	struct:__anon1
size	blk_drv.c	/^	int size;  $/;"	m	struct:blk_dev	file:
size	ramblk_drv.c	/^	int size;  $/;"	m	struct:blk_dev	file:
start_cyl	ram.h	/^    unsigned char start_cyl;                          \/* 10 bits Starting Cylinder*\/$/;"	m	struct:__anon1
start_cyl_hi	ram.h	/^    unsigned char start_cyl_hi:2;                     \/* 6 bits  Starting sector : Bits 6-7 are the upper two bits for the Starting Cylinder field*\/$/;"	m	struct:__anon1
start_head	ram.h	/^    unsigned char start_head;                         \/* Starting head*\/$/;"	m	struct:__anon1
start_sec	ram.h	/^    unsigned char start_sec:6;                        \/* 6 bits  Starting sector : Bits 6-7 are the upper two bits for the Starting Cylinder field*\/$/;"	m	struct:__anon1
