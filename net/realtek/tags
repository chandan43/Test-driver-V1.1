!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AcceptAllPhys	8139too.c	/^	AcceptAllPhys	= 0x01,$/;"	e	enum:rx_mode_bits	file:
AcceptBroadcast	8139too.c	/^	AcceptBroadcast	= 0x08,$/;"	e	enum:rx_mode_bits	file:
AcceptErr	8139too.c	/^	AcceptErr	= 0x20,$/;"	e	enum:rx_mode_bits	file:
AcceptMulticast	8139too.c	/^	AcceptMulticast	= 0x04,$/;"	e	enum:rx_mode_bits	file:
AcceptMyPhys	8139too.c	/^	AcceptMyPhys	= 0x02,$/;"	e	enum:rx_mode_bits	file:
AcceptRunt	8139too.c	/^	AcceptRunt	= 0x10,$/;"	e	enum:rx_mode_bits	file:
BasicModeCtrl	8139too.c	/^	BasicModeCtrl	= 0x62,$/;"	e	enum:RTL8139_registers	file:
BasicModeCtrl	rtl8139.c	/^	BasicModeCtrl	= 0x62,  \/* Basic Mode Control Register*\/$/;"	e	enum:RTL8139_registers	file:
BasicModeStatus	8139too.c	/^	BasicModeStatus	= 0x64,$/;"	e	enum:RTL8139_registers	file:
BasicModeStatus	rtl8139.c	/^	BasicModeStatus	= 0x64,  \/* Basic Mode Status Register*\/$/;"	e	enum:RTL8139_registers	file:
CH_8100	8139too.c	/^	CH_8100,$/;"	e	enum:__anon5	file:
CH_8100	rtl8139.c	/^	CH_8100,$/;"	e	enum:__anon11	file:
CH_8100B_8139D	8139too.c	/^	CH_8100B_8139D,$/;"	e	enum:__anon5	file:
CH_8100B_8139D	rtl8139.c	/^	CH_8100B_8139D,$/;"	e	enum:__anon11	file:
CH_8101	8139too.c	/^	CH_8101,$/;"	e	enum:__anon5	file:
CH_8101	rtl8139.c	/^	CH_8101,$/;"	e	enum:__anon11	file:
CH_8130	8139too.c	/^	CH_8130,$/;"	e	enum:__anon5	file:
CH_8130	rtl8139.c	/^	CH_8130,$/;"	e	enum:__anon11	file:
CH_8139	8139too.c	/^	CH_8139	= 0,$/;"	e	enum:__anon5	file:
CH_8139	rtl8139.c	/^	CH_8139	= 0,$/;"	e	enum:__anon11	file:
CH_8139A	8139too.c	/^	CH_8139A,$/;"	e	enum:__anon5	file:
CH_8139A	rtl8139.c	/^	CH_8139A,$/;"	e	enum:__anon11	file:
CH_8139A_G	8139too.c	/^	CH_8139A_G,$/;"	e	enum:__anon5	file:
CH_8139A_G	rtl8139.c	/^	CH_8139A_G,$/;"	e	enum:__anon11	file:
CH_8139B	8139too.c	/^	CH_8139B,$/;"	e	enum:__anon5	file:
CH_8139B	rtl8139.c	/^	CH_8139B,$/;"	e	enum:__anon11	file:
CH_8139C	8139too.c	/^	CH_8139C,$/;"	e	enum:__anon5	file:
CH_8139C	rtl8139.c	/^	CH_8139C,$/;"	e	enum:__anon11	file:
CH_8139_K	8139too.c	/^	CH_8139_K,$/;"	e	enum:__anon5	file:
CH_8139_K	rtl8139.c	/^	CH_8139_K,$/;"	e	enum:__anon11	file:
CSCR	8139too.c	/^	CSCR		= 0x74,	 \/* Chip Status and Configuration Register. *\/$/;"	e	enum:RTL8139_registers	file:
CSCR	rtl8139.c	/^	CSCR		= 0x74,	 \/* Chip Status and Configuration Register. *\/$/;"	e	enum:RTL8139_registers	file:
CSCRBits	8139too.c	/^enum CSCRBits {$/;"	g	file:
CSCRBits	rtl8139.c	/^enum CSCRBits {$/;"	g	file:
CSCR_LinkChangeBit	8139too.c	/^	CSCR_LinkChangeBit	= 0x0800,$/;"	e	enum:CSCRBits	file:
CSCR_LinkChangeBit	rtl8139.c	/^	CSCR_LinkChangeBit	= 0x0800,$/;"	e	enum:CSCRBits	file:
CSCR_LinkDownCmd	8139too.c	/^	CSCR_LinkDownCmd	= 0x0f3c0,$/;"	e	enum:CSCRBits	file:
CSCR_LinkDownCmd	rtl8139.c	/^	CSCR_LinkDownCmd	= 0x0f3c0,$/;"	e	enum:CSCRBits	file:
CSCR_LinkDownOffCmd	8139too.c	/^	CSCR_LinkDownOffCmd	= 0x003c0,$/;"	e	enum:CSCRBits	file:
CSCR_LinkDownOffCmd	rtl8139.c	/^	CSCR_LinkDownOffCmd	= 0x003c0,$/;"	e	enum:CSCRBits	file:
CSCR_LinkOKBit	8139too.c	/^	CSCR_LinkOKBit		= 0x0400,$/;"	e	enum:CSCRBits	file:
CSCR_LinkOKBit	rtl8139.c	/^	CSCR_LinkOKBit		= 0x0400,$/;"	e	enum:CSCRBits	file:
CSCR_LinkStatusBits	8139too.c	/^	CSCR_LinkStatusBits	= 0x0f000,$/;"	e	enum:CSCRBits	file:
CSCR_LinkStatusBits	rtl8139.c	/^	CSCR_LinkStatusBits	= 0x0f000,$/;"	e	enum:CSCRBits	file:
Cfg1_Driver_Load	8139too.c	/^	Cfg1_Driver_Load = 0x20,$/;"	e	enum:Config1Bits	file:
Cfg1_Driver_Load	rtl8139.c	/^	Cfg1_Driver_Load= 0x20,$/;"	e	enum:Config1Bits	file:
Cfg1_LED0	8139too.c	/^	Cfg1_LED0	= 0x40,$/;"	e	enum:Config1Bits	file:
Cfg1_LED0	rtl8139.c	/^	Cfg1_LED0	= 0x40,$/;"	e	enum:Config1Bits	file:
Cfg1_LED1	8139too.c	/^	Cfg1_LED1	= 0x80,$/;"	e	enum:Config1Bits	file:
Cfg1_LED1	rtl8139.c	/^	Cfg1_LED1	= 0x80,$/;"	e	enum:Config1Bits	file:
Cfg1_MMIO	8139too.c	/^	Cfg1_MMIO	= 0x08,$/;"	e	enum:Config1Bits	file:
Cfg1_MMIO	rtl8139.c	/^	Cfg1_MMIO	= 0x08,$/;"	e	enum:Config1Bits	file:
Cfg1_PIO	8139too.c	/^	Cfg1_PIO	= 0x04,$/;"	e	enum:Config1Bits	file:
Cfg1_PIO	rtl8139.c	/^	Cfg1_PIO	= 0x04,$/;"	e	enum:Config1Bits	file:
Cfg1_PM_Enable	8139too.c	/^	Cfg1_PM_Enable	= 0x01,$/;"	e	enum:Config1Bits	file:
Cfg1_PM_Enable	rtl8139.c	/^	Cfg1_PM_Enable	= 0x01,$/;"	e	enum:Config1Bits	file:
Cfg1_VPD_Enable	8139too.c	/^	Cfg1_VPD_Enable	= 0x02,$/;"	e	enum:Config1Bits	file:
Cfg1_VPD_Enable	rtl8139.c	/^	Cfg1_VPD_Enable	= 0x02,$/;"	e	enum:Config1Bits	file:
Cfg3_CLKRUN_En	8139too.c	/^	Cfg3_CLKRUN_En	= (1 << 2), \/* 1	= enable CLKRUN *\/$/;"	e	enum:Config3Bits	file:
Cfg3_CLKRUN_En	rtl8139.c	/^	Cfg3_CLKRUN_En	= (1 << 2), \/* 1	= enable CLKRUN *\/$/;"	e	enum:Config3Bits	file:
Cfg3_CardB_En	8139too.c	/^	Cfg3_CardB_En 	= (1 << 3), \/* 1	= enable CardBus registers *\/$/;"	e	enum:Config3Bits	file:
Cfg3_CardB_En	rtl8139.c	/^	Cfg3_CardB_En 	= (1 << 3), \/* 1	= enable CardBus registers *\/$/;"	e	enum:Config3Bits	file:
Cfg3_FBtBEn	8139too.c	/^	Cfg3_FBtBEn   	= (1 << 0), \/* 1	= Fast Back to Back *\/$/;"	e	enum:Config3Bits	file:
Cfg3_FBtBEn	rtl8139.c	/^	Cfg3_FBtBEn   	= (1 << 0), \/* 1	= Fast Back to Back *\/$/;"	e	enum:Config3Bits	file:
Cfg3_FuncRegEn	8139too.c	/^	Cfg3_FuncRegEn	= (1 << 1), \/* 1	= enable CardBus Function registers *\/$/;"	e	enum:Config3Bits	file:
Cfg3_FuncRegEn	rtl8139.c	/^	Cfg3_FuncRegEn	= (1 << 1), \/* 1	= enable CardBus Function registers *\/$/;"	e	enum:Config3Bits	file:
Cfg3_GNTSel	8139too.c	/^	Cfg3_GNTSel   	= (1 << 7), \/* 1	= delay 1 clock from PCI GNT signal *\/$/;"	e	enum:Config3Bits	file:
Cfg3_GNTSel	rtl8139.c	/^	Cfg3_GNTSel   	= (1 << 7), \/* 1	= delay 1 clock from PCI GNT signal *\/$/;"	e	enum:Config3Bits	file:
Cfg3_LinkUp	8139too.c	/^	Cfg3_LinkUp   	= (1 << 4), \/* 1	= wake up on link up *\/$/;"	e	enum:Config3Bits	file:
Cfg3_LinkUp	rtl8139.c	/^	Cfg3_LinkUp   	= (1 << 4), \/* 1	= wake up on link up *\/$/;"	e	enum:Config3Bits	file:
Cfg3_Magic	8139too.c	/^	Cfg3_Magic    	= (1 << 5), \/* 1	= wake up on Magic Packet (tm) *\/$/;"	e	enum:Config3Bits	file:
Cfg3_Magic	rtl8139.c	/^	Cfg3_Magic    	= (1 << 5), \/* 1	= wake up on Magic Packet (tm) *\/$/;"	e	enum:Config3Bits	file:
Cfg3_PARM_En	8139too.c	/^	Cfg3_PARM_En  	= (1 << 6), \/* 0	= software can set twister parameters *\/$/;"	e	enum:Config3Bits	file:
Cfg3_PARM_En	rtl8139.c	/^	Cfg3_PARM_En  	= (1 << 6), \/* 0	= software can set twister parameters *\/$/;"	e	enum:Config3Bits	file:
Cfg5_BWF	8139too.c	/^	Cfg5_BWF        = (1 << 6), \/* 1 = accept broadcast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_BWF	rtl8139.c	/^	Cfg5_BWF        = (1 << 6), \/* 1 = accept broadcast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_FIFOAddrPtr	8139too.c	/^	Cfg5_FIFOAddrPtr= (1 << 3), \/* Realtek internal SRAM testing *\/$/;"	e	enum:Config5Bits	file:
Cfg5_FIFOAddrPtr	rtl8139.c	/^	Cfg5_FIFOAddrPtr= (1 << 3), \/* Realtek internal SRAM testing : 1: Both Rx and Tx FIFO address pointers are updated in descending , *\/$/;"	e	enum:Config5Bits	file:
Cfg5_LANWake	8139too.c	/^	Cfg5_LANWake   	= (1 << 1), \/* 1	= enable LANWake signal *\/$/;"	e	enum:Config5Bits	file:
Cfg5_LANWake	rtl8139.c	/^	Cfg5_LANWake   	= (1 << 1), \/* 1	= enable LANWake signal *\/$/;"	e	enum:Config5Bits	file:
Cfg5_LDPS	8139too.c	/^	Cfg5_LDPS      	= (1 << 2), \/* 0	= save power when link is down *\/$/;"	e	enum:Config5Bits	file:
Cfg5_LDPS	rtl8139.c	/^	Cfg5_LDPS      	= (1 << 2), \/* 0	= save power when link is down *\/$/;"	e	enum:Config5Bits	file:
Cfg5_MWF	8139too.c	/^	Cfg5_MWF        = (1 << 5), \/* 1 = accept multicast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_MWF	rtl8139.c	/^	Cfg5_MWF        = (1 << 5), \/* 1 = accept multicast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_PME_STS	8139too.c	/^	Cfg5_PME_STS   	= (1 << 0), \/* 1	= PCI reset resets PME_Status *\/$/;"	e	enum:Config5Bits	file:
Cfg5_PME_STS	rtl8139.c	/^	Cfg5_PME_STS   	= (1 << 0), \/* 1	= PCI reset resets PME_Status *\/$/;"	e	enum:Config5Bits	file:
Cfg5_UWF	8139too.c	/^	Cfg5_UWF        = (1 << 4), \/* 1 = accept unicast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg5_UWF	rtl8139.c	/^	Cfg5_UWF        = (1 << 4), \/* 1 = accept unicast wakeup frame *\/$/;"	e	enum:Config5Bits	file:
Cfg9346	8139too.c	/^	Cfg9346		= 0x50,$/;"	e	enum:RTL8139_registers	file:
Cfg9346	rtl8139.c	/^	Cfg9346		= 0x50,  \/* 93C46 Command Register*\/$/;"	e	enum:RTL8139_registers	file:
Cfg9346Bits	8139too.c	/^enum Cfg9346Bits {$/;"	g	file:
Cfg9346Bits	rtl8139.c	/^enum Cfg9346Bits {$/;"	g	file:
Cfg9346_Lock	8139too.c	/^	Cfg9346_Lock	= 0x00,$/;"	e	enum:Cfg9346Bits	file:
Cfg9346_Lock	rtl8139.c	/^	Cfg9346_Lock	= 0x00,$/;"	e	enum:Cfg9346Bits	file:
Cfg9346_Unlock	8139too.c	/^	Cfg9346_Unlock	= 0xC0,$/;"	e	enum:Cfg9346Bits	file:
Cfg9346_Unlock	rtl8139.c	/^	Cfg9346_Unlock	= 0xC0,$/;"	e	enum:Cfg9346Bits	file:
ChipCmd	8139too.c	/^	ChipCmd		= 0x37,$/;"	e	enum:RTL8139_registers	file:
ChipCmd	rtl8139.c	/^	ChipCmd		= 0x37,  \/* Command Register*\/$/;"	e	enum:RTL8139_registers	file:
ChipCmdBits	8139too.c	/^enum ChipCmdBits {$/;"	g	file:
ChipCmdBits	rtl8139.c	/^enum ChipCmdBits {$/;"	g	file:
ChipCmdClear	8139too.c	/^	ChipCmdClear	= 0xE2,$/;"	e	enum:ClearBitMasks	file:
ChipCmdClear	rtl8139.c	/^	ChipCmdClear	= 0xE2,   \/* Reset: 111(bit 5-7)0001(bit 1)0 ,Reserved bit will be set ,otherwise clear*\/ $/;"	e	enum:ClearBitMasks	file:
ClearBitMasks	8139too.c	/^enum ClearBitMasks {$/;"	g	file:
ClearBitMasks	rtl8139.c	/^enum ClearBitMasks {$/;"	g	file:
CmdReset	8139too.c	/^	CmdReset	= 0x10,$/;"	e	enum:ChipCmdBits	file:
CmdReset	rtl8139.c	/^	CmdReset	= 0x10,  \/*Bit : 4-R\/W-RST-Reset: Setting to 1 forces*\/$/;"	e	enum:ChipCmdBits	file:
CmdRxEnb	8139too.c	/^	CmdRxEnb	= 0x08,$/;"	e	enum:ChipCmdBits	file:
CmdRxEnb	rtl8139.c	/^	CmdRxEnb	= 0x08,  \/*Bit : 3-R\/W-RE,Receiver Enable: When set to 1*\/$/;"	e	enum:ChipCmdBits	file:
CmdTxEnb	8139too.c	/^	CmdTxEnb	= 0x04,$/;"	e	enum:ChipCmdBits	file:
CmdTxEnb	rtl8139.c	/^	CmdTxEnb	= 0x04,  \/*BIT : 2-R\/W-TE,Transmitter Enable: When set to 1 *\/$/;"	e	enum:ChipCmdBits	file:
Config0	8139too.c	/^	Config0		= 0x51,$/;"	e	enum:RTL8139_registers	file:
Config0	rtl8139.c	/^	Config0		= 0x51,  \/* Configuration Register 0*\/$/;"	e	enum:RTL8139_registers	file:
Config1	8139too.c	/^	Config1		= 0x52,$/;"	e	enum:RTL8139_registers	file:
Config1	rtl8139.c	/^	Config1		= 0x52,  \/* Configuration Register 1*\/$/;"	e	enum:RTL8139_registers	file:
Config1Bits	8139too.c	/^enum Config1Bits {$/;"	g	file:
Config1Bits	rtl8139.c	/^enum Config1Bits {$/;"	g	file:
Config1Clear	8139too.c	/^	Config1Clear	= (1<<7)|(1<<6)|(1<<3)|(1<<2)|(1<<1),$/;"	e	enum:ClearBitMasks	file:
Config1Clear	rtl8139.c	/^	Config1Clear	= (1<<7)|(1<<6)|(1<<3)|(1<<2)|(1<<1), \/*Bit 0,4,5 values are bydefault 0 so no need to change otherwise flip*\/ $/;"	e	enum:ClearBitMasks	file:
Config3	8139too.c	/^	Config3		= 0x59,$/;"	e	enum:RTL8139_registers	file:
Config3	rtl8139.c	/^	Config3		= 0x59,  \/* Configuration register 3*\/$/;"	e	enum:RTL8139_registers	file:
Config3Bits	8139too.c	/^enum Config3Bits {$/;"	g	file:
Config3Bits	rtl8139.c	/^enum Config3Bits {$/;"	g	file:
Config4	8139too.c	/^	Config4		= 0x5A,	 \/* absent on RTL-8139A *\/$/;"	e	enum:RTL8139_registers	file:
Config4	rtl8139.c	/^	Config4		= 0x5A,	 \/* absent on RTL-8139A  : Configuration register 4*\/$/;"	e	enum:RTL8139_registers	file:
Config4Bits	8139too.c	/^enum Config4Bits {$/;"	g	file:
Config4Bits	rtl8139.c	/^enum Config4Bits {$/;"	g	file:
Config5	8139too.c	/^	Config5		= 0xD8,	 \/* absent on RTL-8139A *\/$/;"	e	enum:RTL8139_registers	file:
Config5	rtl8139.c	/^	Config5		= 0xD8,	 \/* absent on RTL-8139A *\/$/;"	e	enum:RTL8139_registers	file:
Config5Bits	8139too.c	/^enum Config5Bits {$/;"	g	file:
Config5Bits	rtl8139.c	/^enum Config5Bits {$/;"	g	file:
DRV_NAME	8139too.c	94;"	d	file:
DRV_NAME	rtl8139.c	13;"	d	file:
DRV_VERSION	8139too.c	/^MODULE_VERSION(DRV_VERSION);$/;"	v
DRV_VERSION	8139too.c	95;"	d	file:
DRV_VERSION	rtl8139.c	/^MODULE_VERSION(DRV_VERSION);$/;"	v
DRV_VERSION	rtl8139.c	14;"	d	file:
EE_CS	8139too.c	1141;"	d	file:
EE_CS	rtl8139.c	944;"	d	file:
EE_DATA_READ	8139too.c	1145;"	d	file:
EE_DATA_READ	rtl8139.c	948;"	d	file:
EE_DATA_WRITE	8139too.c	1142;"	d	file:
EE_DATA_WRITE	rtl8139.c	945;"	d	file:
EE_ENB	8139too.c	1146;"	d	file:
EE_ENB	rtl8139.c	949;"	d	file:
EE_ERASE_CMD	8139too.c	1157;"	d	file:
EE_ERASE_CMD	rtl8139.c	958;"	d	file:
EE_READ_CMD	8139too.c	1156;"	d	file:
EE_READ_CMD	rtl8139.c	957;"	d	file:
EE_SHIFT_CLK	8139too.c	1140;"	d	file:
EE_SHIFT_CLK	rtl8139.c	943;"	d	file:
EE_WRITE_0	8139too.c	1143;"	d	file:
EE_WRITE_0	rtl8139.c	946;"	d	file:
EE_WRITE_1	8139too.c	1144;"	d	file:
EE_WRITE_1	rtl8139.c	947;"	d	file:
EE_WRITE_CMD	8139too.c	1155;"	d	file:
EE_WRITE_CMD	rtl8139.c	956;"	d	file:
FIFOTMS	8139too.c	/^	FIFOTMS		= 0x70,	 \/* FIFO Control and test. *\/$/;"	e	enum:RTL8139_registers	file:
FIFOTMS	rtl8139.c	/^	FIFOTMS		= 0x70,	 \/* FIFO Control and test. : N-way Test Register*\/$/;"	e	enum:RTL8139_registers	file:
FlashReg	8139too.c	/^	FlashReg	= 0xD4,	\/* Communication with Flash ROM, four bytes. *\/$/;"	e	enum:RTL8139_registers	file:
FlashReg	rtl8139.c	/^	FlashReg	= 0xD4,	\/* Communication with Flash ROM, four bytes. *\/$/;"	e	enum:RTL8139_registers	file:
HAS_CHIP_XCVR	8139too.c	/^	HAS_CHIP_XCVR = 0x020000,$/;"	e	enum:__anon1	file:
HAS_CHIP_XCVR	rtl8139.c	/^	HAS_CHIP_XCVR = 0x020000,$/;"	e	enum:__anon7	file:
HAS_LNK_CHNG	8139too.c	/^	HAS_LNK_CHNG = 0x040000,$/;"	e	enum:__anon1	file:
HAS_LNK_CHNG	rtl8139.c	/^	HAS_LNK_CHNG = 0x040000,$/;"	e	enum:__anon7	file:
HAS_MII_XCVR	8139too.c	/^	HAS_MII_XCVR = 0x010000,$/;"	e	enum:__anon1	file:
HAS_MII_XCVR	rtl8139.c	/^	HAS_MII_XCVR = 0x010000,$/;"	e	enum:__anon7	file:
HW_REVID	8139too.c	503;"	d	file:
HW_REVID	rtl8139.c	468;"	d	file:
HW_REVID_MASK	8139too.c	505;"	d	file:
HW_REVID_MASK	rtl8139.c	469;"	d	file:
HasHltClk	8139too.c	/^	HasHltClk	= (1 << 0),$/;"	e	enum:chip_flags	file:
HasHltClk	rtl8139.c	/^	HasHltClk	= (1 << 0),$/;"	e	enum:chip_flags	file:
HasLWake	8139too.c	/^	HasLWake	= (1 << 1),$/;"	e	enum:chip_flags	file:
HasLWake	rtl8139.c	/^	HasLWake	= (1 << 1),$/;"	e	enum:chip_flags	file:
HltClk	8139too.c	/^	HltClk		= 0x5B,$/;"	e	enum:RTL8139_registers	file:
HltClk	rtl8139.c	/^	HltClk		= 0x5B,  \/* Reserved*\/$/;"	e	enum:RTL8139_registers	file:
IntrMask	8139too.c	/^	IntrMask	= 0x3C,$/;"	e	enum:RTL8139_registers	file:
IntrMask	rtl8139.c	/^	IntrMask	= 0x3C,  \/* Interrupt Mask Register*\/$/;"	e	enum:RTL8139_registers	file:
IntrStatus	8139too.c	/^	IntrStatus	= 0x3E,$/;"	e	enum:RTL8139_registers	file:
IntrStatus	rtl8139.c	/^	IntrStatus	= 0x3E,  \/* Interrupt Status Register*\/$/;"	e	enum:RTL8139_registers	file:
IntrStatusBits	8139too.c	/^enum IntrStatusBits {$/;"	g	file:
IntrStatusBits	rtl8139.c	/^enum IntrStatusBits {$/;"	g	file:
KDIR	Makefile	/^KDIR=\/lib\/modules\/$(shell uname -r)\/build$/;"	m
LWAKE	8139too.c	/^	LWAKE		= 0x10,		\/* not on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
LWAKE	rtl8139.c	/^	LWAKE		= 0x10,		\/* not on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
LWPTN	8139too.c	/^	LWPTN	= (1 << 2),	\/* not on 8139, 8139A *\/$/;"	e	enum:Config4Bits	file:
LWPTN	rtl8139.c	/^	LWPTN	= (1 << 2),	\/* not on 8139, 8139A : LWAKE pattern: Please refer to LWACT bit : 4 in CONFIG1 register. *\/$/;"	e	enum:Config4Bits	file:
MAC0	8139too.c	/^	MAC0		= 0,	 \/* Ethernet hardware address. *\/$/;"	e	enum:RTL8139_registers	file:
MAC0	rtl8139.c	/^	MAC0		= 0,	 \/* Ethernet hardware address. *\/$/;"	e	enum:RTL8139_registers	file:
MAR0	8139too.c	/^	MAR0		= 8,	 \/* Multicast filter. *\/$/;"	e	enum:RTL8139_registers	file:
MAR0	rtl8139.c	/^	MAR0		= 8,	 \/* Multicast filter. *\/$/;"	e	enum:RTL8139_registers	file:
MAX_ETH_DATA_SIZE	8139too.c	190;"	d	file:
MAX_ETH_DATA_SIZE	rtl8139.c	125;"	d	file:
MAX_ETH_FRAME_SIZE	8139too.c	187;"	d	file:
MAX_ETH_FRAME_SIZE	rtl8139.c	119;"	d	file:
MAX_UNITS	8139too.c	146;"	d	file:
MAX_UNITS	rtl8139.c	73;"	d	file:
MDIO_CLK	8139too.c	1206;"	d	file:
MDIO_DATA_IN	8139too.c	1205;"	d	file:
MDIO_DATA_OUT	8139too.c	1204;"	d	file:
MDIO_DIR	8139too.c	1203;"	d	file:
MDIO_WRITE0	8139too.c	1207;"	d	file:
MDIO_WRITE1	8139too.c	1208;"	d	file:
MediaStatus	8139too.c	/^	MediaStatus	= 0x58,$/;"	e	enum:RTL8139_registers	file:
MediaStatus	rtl8139.c	/^	MediaStatus	= 0x58,  \/* Media Status Register*\/$/;"	e	enum:RTL8139_registers	file:
MultiIntr	8139too.c	/^	MultiIntr	= 0x5C,$/;"	e	enum:RTL8139_registers	file:
MultiIntr	rtl8139.c	/^	MultiIntr	= 0x5C,  \/* Multiple Interrupt Select*\/$/;"	e	enum:RTL8139_registers	file:
MultiIntrClear	8139too.c	/^	MultiIntrClear	= 0xF000,$/;"	e	enum:ClearBitMasks	file:
MultiIntrClear	rtl8139.c	/^	MultiIntrClear	= 0xF000, \/* Multiple Interrupt Select Register : Bit 11 to 0 , 1 to set and 0 for Clear , 15-12 : Reserved*\/   $/;"	e	enum:ClearBitMasks	file:
NUM_TX_DESC	8139too.c	184;"	d	file:
NUM_TX_DESC	rtl8139.c	116;"	d	file:
NWayAdvert	8139too.c	/^	NWayAdvert	= 0x66,$/;"	e	enum:RTL8139_registers	file:
NWayAdvert	rtl8139.c	/^	NWayAdvert	= 0x66,  \/* Auto-Negotiation Advertisement Register*\/$/;"	e	enum:RTL8139_registers	file:
NWayExpansion	8139too.c	/^	NWayExpansion	= 0x6A,$/;"	e	enum:RTL8139_registers	file:
NWayExpansion	rtl8139.c	/^	NWayExpansion	= 0x6A,  \/* Auto-Negotiation Expansion Register*\/$/;"	e	enum:RTL8139_registers	file:
NWayLPAR	8139too.c	/^	NWayLPAR	= 0x68,$/;"	e	enum:RTL8139_registers	file:
NWayLPAR	rtl8139.c	/^	NWayLPAR	= 0x68,  \/* Auto-Negotiation Link Partner Register*\/$/;"	e	enum:RTL8139_registers	file:
PARA78	8139too.c	/^	PARA78		= 0x78,$/;"	e	enum:RTL8139_registers	file:
PARA78	rtl8139.c	/^	PARA78		= 0x78,  \/* PHY parameter 1 :EPROM Reg*\/$/;"	e	enum:RTL8139_registers	file:
PARA78_default	8139too.c	/^	PARA78_default	= 0x78fa8388,$/;"	e	enum:TwisterParamVals	file:
PARA7c	8139too.c	/^	PARA7c		= 0x7c,	 \/* Magic transceiver parameter register. *\/$/;"	e	enum:RTL8139_registers	file:
PARA7c	rtl8139.c	/^	PARA7c		= 0x7c,	 \/* Magic transceiver parameter register. :Twister parameter*\/$/;"	e	enum:RTL8139_registers	file:
PARA7c_default	8139too.c	/^	PARA7c_default	= 0xcb38de43,	\/* param[0][3] *\/$/;"	e	enum:TwisterParamVals	file:
PARA7c_xxx	8139too.c	/^	PARA7c_xxx	= 0xcb38de43,$/;"	e	enum:TwisterParamVals	file:
PCIErr	8139too.c	/^	PCIErr		= 0x8000,$/;"	e	enum:IntrStatusBits	file:
PCIErr	rtl8139.c	/^	PCIErr		= 0x8000,\/*BIT : 15-R\/W-SERR :Set to 1 when the RTL8139D(L) signals a system error on the PCI bus.*\/ $/;"	e	enum:IntrStatusBits	file:
PCSTimeout	8139too.c	/^	PCSTimeout	= 0x4000,$/;"	e	enum:IntrStatusBits	file:
PCSTimeout	rtl8139.c	/^	PCSTimeout	= 0x4000,\/*BIT : 14 R\/W TimeOut: Set to 1 when the TCTR register reaches to the value of the TimerInt register.*\/ $/;"	e	enum:IntrStatusBits	file:
PWRDN	8139too.c	/^	PWRDN		= (1 << 0),	\/* only on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
PWRDN	rtl8139.c	/^	PWRDN		= (1 << 0),\/* only on 8139, 8139A : 1  means A(bit 4 of the Status Register) in the PCI)=1, B(Cap_Ptr register)=50h, C(power management)=01h, D(PM registers) valid, E=0*\/$/;"	e	enum:Config1Bits	file:
RTL8129	8139too.c	/^	RTL8129,$/;"	e	enum:__anon2	file:
RTL8129	rtl8139.c	/^	RTL8129,$/;"	e	enum:__anon8	file:
RTL8129_CAPS	8139too.c	222;"	d	file:
RTL8129_CAPS	rtl8139.c	157;"	d	file:
RTL8139	8139too.c	/^	RTL8139 = 0,$/;"	e	enum:__anon2	file:
RTL8139	rtl8139.c	/^	RTL8139 = 0,$/;"	e	enum:__anon8	file:
RTL8139B_IO_SIZE	8139too.c	220;"	d	file:
RTL8139B_IO_SIZE	rtl8139.c	155;"	d	file:
RTL8139_CAPS	8139too.c	223;"	d	file:
RTL8139_CAPS	rtl8139.c	158;"	d	file:
RTL8139_DEBUG	8139too.c	127;"	d	file:
RTL8139_DEBUG	rtl8139.c	50;"	d	file:
RTL8139_DEF_MSG_ENABLE	8139too.c	121;"	d	file:
RTL8139_DEF_MSG_ENABLE	rtl8139.c	46;"	d	file:
RTL8139_DRIVER_NAME	8139too.c	118;"	d	file:
RTL8139_DRIVER_NAME	rtl8139.c	15;"	d	file:
RTL8139_NDEBUG	8139too.c	130;"	d	file:
RTL8139_NDEBUG	rtl8139.c	53;"	d	file:
RTL8139_registers	8139too.c	/^enum RTL8139_registers {$/;"	g	file:
RTL8139_registers	rtl8139.c	/^enum RTL8139_registers {$/;"	g	file:
RTL_MIN_IO_SIZE	8139too.c	219;"	d	file:
RTL_MIN_IO_SIZE	rtl8139.c	154;"	d	file:
RTL_NUM_STATS	8139too.c	217;"	d	file:
RTL_NUM_STATS	rtl8139.c	152;"	d	file:
RTL_R16	8139too.c	679;"	d	file:
RTL_R16	rtl8139.c	610;"	d	file:
RTL_R32	8139too.c	680;"	d	file:
RTL_R32	rtl8139.c	611;"	d	file:
RTL_R8	8139too.c	678;"	d	file:
RTL_R8	rtl8139.c	609;"	d	file:
RTL_REGS_VER	8139too.c	218;"	d	file:
RTL_REGS_VER	rtl8139.c	153;"	d	file:
RTL_W16	8139too.c	674;"	d	file:
RTL_W16	rtl8139.c	605;"	d	file:
RTL_W16_F	8139too.c	669;"	d	file:
RTL_W16_F	rtl8139.c	600;"	d	file:
RTL_W32	8139too.c	675;"	d	file:
RTL_W32	rtl8139.c	606;"	d	file:
RTL_W32_F	8139too.c	670;"	d	file:
RTL_W32_F	rtl8139.c	601;"	d	file:
RTL_W8	8139too.c	673;"	d	file:
RTL_W8	rtl8139.c	604;"	d	file:
RTL_W8_F	8139too.c	668;"	d	file:
RTL_W8_F	rtl8139.c	599;"	d	file:
RX_BUF_IDX	8139too.c	169;"	d	file:
RX_BUF_IDX	8139too.c	171;"	d	file:
RX_BUF_IDX	rtl8139.c	101;"	d	file:
RX_BUF_IDX	rtl8139.c	103;"	d	file:
RX_BUF_LEN	8139too.c	173;"	d	file:
RX_BUF_LEN	rtl8139.c	105;"	d	file:
RX_BUF_PAD	8139too.c	174;"	d	file:
RX_BUF_PAD	rtl8139.c	106;"	d	file:
RX_BUF_TOT_LEN	8139too.c	178;"	d	file:
RX_BUF_TOT_LEN	8139too.c	180;"	d	file:
RX_BUF_TOT_LEN	rtl8139.c	110;"	d	file:
RX_BUF_TOT_LEN	rtl8139.c	112;"	d	file:
RX_BUF_WRAP_PAD	8139too.c	175;"	d	file:
RX_BUF_WRAP_PAD	rtl8139.c	107;"	d	file:
RX_DMA_BURST	8139too.c	202;"	d	file:
RX_DMA_BURST	rtl8139.c	136;"	d	file:
RX_FIFO_THRESH	8139too.c	201;"	d	file:
RX_FIFO_THRESH	rtl8139.c	135;"	d	file:
RxAckBits	8139too.c	/^	RxAckBits	= RxFIFOOver | RxOverflow | RxOK,$/;"	e	enum:IntrStatusBits	file:
RxAckBits	rtl8139.c	/^	RxAckBits	= RxFIFOOver | RxOverflow | RxOK,$/;"	e	enum:IntrStatusBits	file:
RxBadAlign	8139too.c	/^	RxBadAlign	= 0x0002,$/;"	e	enum:RxStatusBits	file:
RxBadAlign	rtl8139.c	/^	RxBadAlign	= 0x0002,$/;"	e	enum:RxStatusBits	file:
RxBadSymbol	8139too.c	/^	RxBadSymbol	= 0x0020,$/;"	e	enum:RxStatusBits	file:
RxBadSymbol	rtl8139.c	/^	RxBadSymbol	= 0x0020,$/;"	e	enum:RxStatusBits	file:
RxBroadcast	8139too.c	/^	RxBroadcast	= 0x2000,$/;"	e	enum:RxStatusBits	file:
RxBroadcast	rtl8139.c	/^	RxBroadcast	= 0x2000,$/;"	e	enum:RxStatusBits	file:
RxBuf	8139too.c	/^	RxBuf		= 0x30,$/;"	e	enum:RTL8139_registers	file:
RxBuf	rtl8139.c	/^	RxBuf		= 0x30,  \/* Receive (Rx) Buffer Start Address*\/$/;"	e	enum:RTL8139_registers	file:
RxBufAddr	8139too.c	/^	RxBufAddr	= 0x3A,$/;"	e	enum:RTL8139_registers	file:
RxBufAddr	rtl8139.c	/^	RxBufAddr	= 0x3A,  \/* Current Buffer Address: The initial value is 0000h. It reflects total received byte-count in the rx buffer.*\/$/;"	e	enum:RTL8139_registers	file:
RxBufEmpty	8139too.c	/^	RxBufEmpty	= 0x01,$/;"	e	enum:ChipCmdBits	file:
RxBufEmpty	rtl8139.c	/^	RxBufEmpty	= 0x01,  \/*Bit : 0 -R- BUFE- Buffer Empty  *\/$/;"	e	enum:ChipCmdBits	file:
RxBufPtr	8139too.c	/^	RxBufPtr	= 0x38,$/;"	e	enum:RTL8139_registers	file:
RxBufPtr	rtl8139.c	/^	RxBufPtr	= 0x38,  \/* Current Address of Packet Read*\/$/;"	e	enum:RTL8139_registers	file:
RxCRCErr	8139too.c	/^	RxCRCErr	= 0x0004,$/;"	e	enum:RxStatusBits	file:
RxCRCErr	rtl8139.c	/^	RxCRCErr	= 0x0004,$/;"	e	enum:RxStatusBits	file:
RxCfgDMAShift	8139too.c	/^	RxCfgDMAShift	= 8,$/;"	e	enum:RxConfigBits	file:
RxCfgDMAShift	rtl8139.c	/^	RxCfgDMAShift	= 8,$/;"	e	enum:RxConfigBits	file:
RxCfgDMAUnlimited	8139too.c	/^	RxCfgDMAUnlimited = (7 << RxCfgDMAShift),$/;"	e	enum:RxConfigBits	file:
RxCfgDMAUnlimited	rtl8139.c	/^	RxCfgDMAUnlimited = (7 << RxCfgDMAShift),$/;"	e	enum:RxConfigBits	file:
RxCfgFIFONone	8139too.c	/^	RxCfgFIFONone	= (7 << RxCfgFIFOShift),$/;"	e	enum:RxConfigBits	file:
RxCfgFIFONone	rtl8139.c	/^	RxCfgFIFONone	= (7 << RxCfgFIFOShift),$/;"	e	enum:RxConfigBits	file:
RxCfgFIFOShift	8139too.c	/^	RxCfgFIFOShift	= 13,$/;"	e	enum:RxConfigBits	file:
RxCfgFIFOShift	rtl8139.c	/^	RxCfgFIFOShift	= 13,$/;"	e	enum:RxConfigBits	file:
RxCfgRcv16K	8139too.c	/^	RxCfgRcv16K	= (1 << 11),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv16K	rtl8139.c	/^	RxCfgRcv16K	= (1 << 11),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv32K	8139too.c	/^	RxCfgRcv32K	= (1 << 12),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv32K	rtl8139.c	/^	RxCfgRcv32K	= (1 << 12),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv64K	8139too.c	/^	RxCfgRcv64K	= (1 << 11) | (1 << 12),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv64K	rtl8139.c	/^	RxCfgRcv64K	= (1 << 11) | (1 << 12),$/;"	e	enum:RxConfigBits	file:
RxCfgRcv8K	8139too.c	/^	RxCfgRcv8K	= 0,$/;"	e	enum:RxConfigBits	file:
RxCfgRcv8K	rtl8139.c	/^	RxCfgRcv8K	= 0,$/;"	e	enum:RxConfigBits	file:
RxConfig	8139too.c	/^	RxConfig	= 0x44,$/;"	e	enum:RTL8139_registers	file:
RxConfig	rtl8139.c	/^	RxConfig	= 0x44,  \/* Receive (Rx) Configuration Register*\/$/;"	e	enum:RTL8139_registers	file:
RxConfigBits	8139too.c	/^enum RxConfigBits {$/;"	g	file:
RxConfigBits	rtl8139.c	/^enum RxConfigBits {$/;"	g	file:
RxErr	8139too.c	/^	RxErr		= 0x02,$/;"	e	enum:IntrStatusBits	file:
RxErr	rtl8139.c	/^	RxErr		= 0x02,  \/*BIT : 1 R\/W RER : Receive (Rx) Error: Indicates that a packet has either CRC error or frame alignment error (FAE). *\/$/;"	e	enum:IntrStatusBits	file:
RxFIFOOver	8139too.c	/^	RxFIFOOver	= 0x40,$/;"	e	enum:IntrStatusBits	file:
RxFIFOOver	rtl8139.c	/^	RxFIFOOver	= 0x40,  \/*BIT : 6 R\/W FOVW: Rx FIFO Overflow: Set when an overflow occurs on the Rx status FIFO.*\/$/;"	e	enum:IntrStatusBits	file:
RxMissed	8139too.c	/^	RxMissed	= 0x4C,  \/* 24 bits valid, write clears. *\/$/;"	e	enum:RTL8139_registers	file:
RxMissed	rtl8139.c	/^	RxMissed	= 0x4C,  \/* 24 bits valid, write clears. indicates the number of packets discarded due to Rx FIFO overflow. After s\/w reset, MPC is cleared. Only the lower 3 bytes are valid.*\/$/;"	e	enum:RTL8139_registers	file:
RxMulticast	8139too.c	/^	RxMulticast	= 0x8000,$/;"	e	enum:RxStatusBits	file:
RxMulticast	rtl8139.c	/^	RxMulticast	= 0x8000,$/;"	e	enum:RxStatusBits	file:
RxNoWrap	8139too.c	/^	RxNoWrap	= (1 << 7),$/;"	e	enum:RxConfigBits	file:
RxNoWrap	rtl8139.c	/^	RxNoWrap	= (1 << 7),$/;"	e	enum:RxConfigBits	file:
RxOK	8139too.c	/^	RxOK		= 0x01,$/;"	e	enum:IntrStatusBits	file:
RxOK	rtl8139.c	/^	RxOK		= 0x01,  \/*BIT : 0 R\/W ROK : Receive (Rx) OK: In normal mode, indicates the successful completion of a packet reception.*\/$/;"	e	enum:IntrStatusBits	file:
RxOverflow	8139too.c	/^	RxOverflow	= 0x10,$/;"	e	enum:IntrStatusBits	file:
RxOverflow	rtl8139.c	/^	RxOverflow	= 0x10,  \/*BIT : 4 R\/W RXOVW : Rx Buffer Overflow: Set when receive (Rx) buffer ring storage resources have been exhausted.*\/$/;"	e	enum:IntrStatusBits	file:
RxPhysical	8139too.c	/^	RxPhysical	= 0x4000,$/;"	e	enum:RxStatusBits	file:
RxPhysical	rtl8139.c	/^	RxPhysical	= 0x4000,$/;"	e	enum:RxStatusBits	file:
RxRunt	8139too.c	/^	RxRunt		= 0x0010,$/;"	e	enum:RxStatusBits	file:
RxRunt	rtl8139.c	/^	RxRunt		= 0x0010,$/;"	e	enum:RxStatusBits	file:
RxStatusBits	8139too.c	/^enum RxStatusBits {$/;"	g	file:
RxStatusBits	rtl8139.c	/^enum RxStatusBits {$/;"	g	file:
RxStatusOK	8139too.c	/^	RxStatusOK	= 0x0001,$/;"	e	enum:RxStatusBits	file:
RxStatusOK	rtl8139.c	/^	RxStatusOK	= 0x0001,$/;"	e	enum:RxStatusBits	file:
RxTooLong	8139too.c	/^	RxTooLong	= 0x0008,$/;"	e	enum:RxStatusBits	file:
RxTooLong	rtl8139.c	/^	RxTooLong	= 0x0008,$/;"	e	enum:RxStatusBits	file:
RxUnderrun	8139too.c	/^	RxUnderrun	= 0x20,$/;"	e	enum:IntrStatusBits	file:
RxUnderrun	rtl8139.c	/^	RxUnderrun	= 0x20,  \/*BIT : 5 R\/W PUN\/LinkChg : Packet Underrun\/Link Change: Set to 1 when CAPR is written but Rx buffer is empty, or when link status is changed.*\/$/;"	e	enum:IntrStatusBits	file:
SLEEP	8139too.c	/^	SLEEP		= (1 << 1),	\/* only on 8139, 8139A *\/$/;"	e	enum:Config1Bits	file:
SLEEP	rtl8139.c	/^	SLEEP		= (1 << 1),\/* only on 8139, 8139A : Set to enable Vital Product Data: The VPD data is stored in 93C46 from within offset 40h-7Fh.*\/$/;"	e	enum:Config1Bits	file:
TX_BUF_SIZE	8139too.c	193;"	d	file:
TX_BUF_SIZE	rtl8139.c	128;"	d	file:
TX_BUF_TOT_LEN	8139too.c	194;"	d	file:
TX_BUF_TOT_LEN	rtl8139.c	129;"	d	file:
TX_DMA_BURST	8139too.c	203;"	d	file:
TX_DMA_BURST	rtl8139.c	137;"	d	file:
TX_FIFO_THRESH	8139too.c	198;"	d	file:
TX_FIFO_THRESH	rtl8139.c	132;"	d	file:
TX_RETRY	8139too.c	204;"	d	file:
TX_RETRY	rtl8139.c	138;"	d	file:
TX_TIMEOUT	8139too.c	208;"	d	file:
TX_TIMEOUT	rtl8139.c	142;"	d	file:
Timer	8139too.c	/^	Timer		= 0x48,	 \/* A general-purpose counter. *\/$/;"	e	enum:RTL8139_registers	file:
Timer	rtl8139.c	/^	Timer		= 0x48,	 \/* A 32-bit general-purpose counter.Timer CounT Register Writing any value to this 32-bit register will reset the original timer and begin to count from zero.*\/$/;"	e	enum:RTL8139_registers	file:
TimerInt	8139too.c	/^	TimerInt	= 0x54,$/;"	e	enum:RTL8139_registers	file:
TimerInt	rtl8139.c	/^	TimerInt	= 0x54,  \/* Timer Interrupt Register.*\/$/;"	e	enum:RTL8139_registers	file:
TwisterParamVals	8139too.c	/^enum TwisterParamVals {$/;"	g	file:
TxAborted	8139too.c	/^	TxAborted	= 0x40000000,$/;"	e	enum:TxStatusBits	file:
TxAborted	rtl8139.c	/^	TxAborted	= 0x40000000,$/;"	e	enum:TxStatusBits	file:
TxAddr0	8139too.c	/^	TxAddr0		= 0x20,	 \/* Tx descriptors (also four 32bit). *\/$/;"	e	enum:RTL8139_registers	file:
TxAddr0	rtl8139.c	/^	TxAddr0		= 0x20,	 \/* Tx descriptors (also four 32bit). *\/$/;"	e	enum:RTL8139_registers	file:
TxCRC	8139too.c	/^	TxCRC		= (1 << 16),	\/* DISABLE Tx pkt CRC append *\/$/;"	e	enum:tx_config_bits	file:
TxCRC	rtl8139.c	/^	TxCRC		= (1 << 16),	\/* DISABLE Tx pkt CRC append *\/$/;"	e	enum:tx_config_bits	file:
TxCarrierLost	8139too.c	/^	TxCarrierLost	= 0x80000000,$/;"	e	enum:TxStatusBits	file:
TxCarrierLost	rtl8139.c	/^	TxCarrierLost	= 0x80000000,$/;"	e	enum:TxStatusBits	file:
TxClearAbt	8139too.c	/^	TxClearAbt	= (1 << 0),	\/* Clear abort (WO) *\/$/;"	e	enum:tx_config_bits	file:
TxClearAbt	rtl8139.c	/^	TxClearAbt	= (1 << 0),	\/* Clear abort (WO) *\/$/;"	e	enum:tx_config_bits	file:
TxConfig	8139too.c	/^	TxConfig	= 0x40,$/;"	e	enum:RTL8139_registers	file:
TxConfig	rtl8139.c	/^	TxConfig	= 0x40,  \/* Transmit (Tx) Configuration Register*\/$/;"	e	enum:RTL8139_registers	file:
TxDMAShift	8139too.c	/^	TxDMAShift	= 8, \/* DMA burst value (0-7) is shifted X many bits *\/$/;"	e	enum:tx_config_bits	file:
TxDMAShift	rtl8139.c	/^	TxDMAShift	= 8, \/* DMA burst value (0-7) is shifted X many bits *\/$/;"	e	enum:tx_config_bits	file:
TxErr	8139too.c	/^	TxErr		= 0x08,$/;"	e	enum:IntrStatusBits	file:
TxErr	rtl8139.c	/^	TxErr		= 0x08,  \/*BIT : 3 R\/W TER : Transmit (Tx) Error: Indicates that a packet transmission was aborted, due to excessive collisions, according to the TXRR's setting.*\/$/;"	e	enum:IntrStatusBits	file:
TxHostOwns	8139too.c	/^	TxHostOwns	= 0x2000,$/;"	e	enum:TxStatusBits	file:
TxHostOwns	rtl8139.c	/^	TxHostOwns	= 0x2000, $/;"	e	enum:TxStatusBits	file:
TxIFG84	8139too.c	/^        TxIFG84		= (0 << TxIFGShift), \/* 8.4us \/ 840ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG84	rtl8139.c	/^        TxIFG84		= (0 << TxIFGShift), \/* 8.4us \/ 840ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG88	8139too.c	/^        TxIFG88		= (1 << TxIFGShift), \/* 8.8us \/ 880ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG88	rtl8139.c	/^        TxIFG88		= (1 << TxIFGShift), \/* 8.8us \/ 880ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG92	8139too.c	/^        TxIFG92		= (2 << TxIFGShift), \/* 9.2us \/ 920ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG92	rtl8139.c	/^        TxIFG92		= (2 << TxIFGShift), \/* 9.2us \/ 920ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG96	8139too.c	/^        TxIFG96		= (3 << TxIFGShift), \/* 9.6us \/ 960ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFG96	rtl8139.c	/^        TxIFG96		= (3 << TxIFGShift), \/* 9.6us \/ 960ns (10 \/ 100Mbps) *\/$/;"	e	enum:tx_config_bits	file:
TxIFGShift	8139too.c	/^        TxIFGShift	= 24,$/;"	e	enum:tx_config_bits	file:
TxIFGShift	rtl8139.c	/^        TxIFGShift	= 24,                \/* BIT 24-25 IFG1, 0 : R\/W Interframe Gap Time: *\/  $/;"	e	enum:tx_config_bits	file:
TxLoopBack	8139too.c	/^	TxLoopBack	= (1 << 18) | (1 << 17), \/* enable loopback test mode *\/$/;"	e	enum:tx_config_bits	file:
TxLoopBack	rtl8139.c	/^	TxLoopBack	= (1 << 18) | (1 << 17), \/* enable loopback test mode *\/$/;"	e	enum:tx_config_bits	file:
TxOK	8139too.c	/^	TxOK		= 0x04,$/;"	e	enum:IntrStatusBits	file:
TxOK	rtl8139.c	/^	TxOK		= 0x04,  \/*BIT : 2 R\/W TOK : Transmit (Tx) OK: Indicates that a packet transmission is completed successfully.*\/$/;"	e	enum:IntrStatusBits	file:
TxOutOfWindow	8139too.c	/^	TxOutOfWindow	= 0x20000000,$/;"	e	enum:TxStatusBits	file:
TxOutOfWindow	rtl8139.c	/^	TxOutOfWindow	= 0x20000000,$/;"	e	enum:TxStatusBits	file:
TxRetryShift	8139too.c	/^	TxRetryShift	= 4, \/* TXRR value (0-15) is shifted X many bits *\/$/;"	e	enum:tx_config_bits	file:
TxRetryShift	rtl8139.c	/^	TxRetryShift	= 4, \/* TXRR value (0-15) is shifted X many bits *\/$/;"	e	enum:tx_config_bits	file:
TxStatOK	8139too.c	/^	TxStatOK	= 0x8000,$/;"	e	enum:TxStatusBits	file:
TxStatOK	rtl8139.c	/^	TxStatOK	= 0x8000,$/;"	e	enum:TxStatusBits	file:
TxStatus0	8139too.c	/^	TxStatus0	= 0x10,	 \/* Transmit status (Four 32bit registers). *\/$/;"	e	enum:RTL8139_registers	file:
TxStatus0	rtl8139.c	/^	TxStatus0	= 0x10,	 \/* Transmit status (Four 32bit registers). *\/$/;"	e	enum:RTL8139_registers	file:
TxStatusBits	8139too.c	/^enum TxStatusBits {$/;"	g	file:
TxStatusBits	rtl8139.c	/^enum TxStatusBits {$/;"	g	file:
TxSummary	8139too.c	/^	TxSummary	= 0x60,$/;"	e	enum:RTL8139_registers	file:
TxSummary	rtl8139.c	/^	TxSummary	= 0x60,  \/* Transmit Status of All Descriptors*\/$/;"	e	enum:RTL8139_registers	file:
TxUnderrun	8139too.c	/^	TxUnderrun	= 0x4000,$/;"	e	enum:TxStatusBits	file:
TxUnderrun	rtl8139.c	/^	TxUnderrun	= 0x4000, $/;"	e	enum:TxStatusBits	file:
TxVersionMask	8139too.c	/^	TxVersionMask	= 0x7C800000, \/* mask out version bits 30-26, 23 *\/$/;"	e	enum:tx_config_bits	file:
TxVersionMask	rtl8139.c	/^	TxVersionMask	= 0x7C800000, \/* mask out version bits 30-26, 23 0111   *\/$/;"	e	enum:tx_config_bits	file:
__rtl8139_cleanup_dev	8139too.c	/^static void __rtl8139_cleanup_dev (struct net_device *dev)$/;"	f	file:
__rtl8139_cleanup_dev	rtl8139.c	/^static void __rtl8139_cleanup_dev (struct net_device *dev)$/;"	f	file:
__set_rx_mode	8139too.c	/^static void __set_rx_mode (struct net_device *dev)$/;"	f	file:
__set_rx_mode	rtl8139.c	/^static void __set_rx_mode (struct net_device *dev)$/;"	f	file:
assert	8139too.c	134;"	d	file:
assert	8139too.c	136;"	d	file:
assert	rtl8139.c	65;"	d	file:
assert	rtl8139.c	67;"	d	file:
board_info	8139too.c	/^} board_info[] = {$/;"	v	typeref:struct:__anon3	file:
board_info	rtl8139.c	/^} board_info[] = {$/;"	v	typeref:struct:__anon9	file:
board_t	8139too.c	/^} board_t;$/;"	t	typeref:enum:__anon2	file:
board_t	rtl8139.c	/^}board_t;$/;"	v	typeref:enum:__anon8
bytes	8139too.c	/^	u64	bytes;$/;"	m	struct:rtl8139_stats	file:
bytes	rtl8139.c	/^	u64	bytes;$/;"	m	struct:rtl8139_stats	file:
chip_flags	8139too.c	/^enum chip_flags {$/;"	g	file:
chip_flags	rtl8139.c	/^enum chip_flags {$/;"	g	file:
chip_t	8139too.c	/^} chip_t;$/;"	t	typeref:enum:__anon5	file:
chipset	8139too.c	/^	chip_t			chipset;$/;"	m	struct:rtl8139_private	file:
chipset	rtl8139.c	/^	chip_t			chipset;$/;"	m	struct:rtl8139_private	file:
cur_rx	8139too.c	/^	unsigned int		cur_rx;	\/* RX buf index of next pkt *\/$/;"	m	struct:rtl8139_private	file:
cur_rx	rtl8139.c	/^	unsigned int		cur_rx;	  \/* RX buf index of next pkt *\/$/;"	m	struct:rtl8139_private	file:
cur_tx	8139too.c	/^	unsigned long		cur_tx;$/;"	m	struct:rtl8139_private	file:
cur_tx	rtl8139.c	/^	unsigned long		cur_tx;   \/*cur_tx shall hold current transmission descriptor*\/$/;"	m	struct:rtl8139_private	file:
debug	8139too.c	/^static int debug = -1;$/;"	v	file:
debug	rtl8139.c	/^static int debug = -1;$/;"	v	file:
default_port	8139too.c	/^	unsigned int		default_port : 4; \/* Last dev->if_port value. *\/$/;"	m	struct:rtl8139_private	file:
default_port	rtl8139.c	/^	unsigned int		default_port : 4; \/* Last dev->if_port value. *\/$/;"	m	struct:rtl8139_private	file:
dev	8139too.c	/^	struct net_device	*dev;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::net_device	file:
dev	rtl8139.c	/^	struct net_device	*dev; \/*  The NET DEVICE structure.*\/$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::net_device	file:
dirty_tx	8139too.c	/^	unsigned long		dirty_tx;$/;"	m	struct:rtl8139_private	file:
dirty_tx	rtl8139.c	/^	unsigned long		dirty_tx; \/*dirty_tx denotes the first of transmission descriptors which have not completed transmission.*\/$/;"	m	struct:rtl8139_private	file:
drv_flags	8139too.c	/^	int			drv_flags;$/;"	m	struct:rtl8139_private	file:
drv_flags	rtl8139.c	/^	int			drv_flags;    $/;"	m	struct:rtl8139_private	file:
early_rx	8139too.c	/^	unsigned long early_rx;$/;"	m	struct:rtl_extra_stats	file:
early_rx	rtl8139.c	/^	unsigned long early_rx;$/;"	m	struct:rtl_extra_stats	file:
eeprom_delay	8139too.c	1152;"	d	file:
eeprom_delay	rtl8139.c	953;"	d	file:
ethtool_stats_keys	8139too.c	/^} ethtool_stats_keys[] = {$/;"	v	typeref:struct:__anon4	file:
ethtool_stats_keys	rtl8139.c	/^} ethtool_stats_keys[] = {$/;"	v	typeref:struct:__anon10	file:
fifo_copy_timeout	8139too.c	/^	unsigned long		fifo_copy_timeout;$/;"	m	struct:rtl8139_private	file:
fifo_copy_timeout	rtl8139.c	/^	unsigned long		fifo_copy_timeout;$/;"	m	struct:rtl8139_private	file:
flags	8139too.c	/^	u32 flags;$/;"	m	struct:__anon6	file:
flags	rtl8139.c	/^	u32 flags;$/;"	m	struct:__anon12	file:
full_duplex	8139too.c	/^static int full_duplex[MAX_UNITS] = {-1, -1, -1, -1, -1, -1, -1, -1};$/;"	v	file:
full_duplex	rtl8139.c	/^static int full_duplex[MAX_UNITS] = {-1, -1, -1, -1, -1, -1, -1, -1};$/;"	v	file:
have_thread	8139too.c	/^	unsigned int		have_thread : 1;$/;"	m	struct:rtl8139_private	file:
have_thread	rtl8139.c	/^	unsigned int		have_thread : 1;$/;"	m	struct:rtl8139_private	file:
hw_flags	8139too.c	/^	u32 hw_flags;$/;"	m	struct:__anon3	file:
hw_flags	rtl8139.c	/^	u32 hw_flags;$/;"	m	struct:__anon9	file:
lock	8139too.c	/^	spinlock_t		lock;$/;"	m	struct:rtl8139_private	file:
lock	rtl8139.c	/^	spinlock_t		lock;$/;"	m	struct:rtl8139_private	file:
mdio_delay	8139too.c	1210;"	d	file:
mdio_read	8139too.c	/^static int mdio_read (struct net_device *dev, int phy_id, int location)$/;"	f	file:
mdio_sync	8139too.c	/^static void mdio_sync (void __iomem *ioaddr)$/;"	f	file:
mdio_write	8139too.c	/^static void mdio_write (struct net_device *dev, int phy_id, int location,$/;"	f	file:
media	8139too.c	/^static int media[MAX_UNITS] = {-1, -1, -1, -1, -1, -1, -1, -1};$/;"	v	file:
media	rtl8139.c	/^static int media[MAX_UNITS] = {-1, -1, -1, -1, -1, -1, -1, -1};$/;"	v	file:
mii	8139too.c	/^	struct mii_if_info	mii;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::mii_if_info	file:
mii	rtl8139.c	/^	struct mii_if_info	mii;   \/*Media Independent Interface Support : Ethtool Support*\/$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::mii_if_info	file:
mii_2_8139_map	8139too.c	/^static const char mii_2_8139_map[8] = {$/;"	v	file:
mmio_addr	8139too.c	/^	void __iomem		*mmio_addr;$/;"	m	struct:rtl8139_private	file:
mmio_addr	rtl8139.c	/^	void __iomem		*mmio_addr;  \/*memory mapped I\/O addr *\/$/;"	m	struct:rtl8139_private	file:
msg_enable	8139too.c	/^	u32			msg_enable;$/;"	m	struct:rtl8139_private	file:
msg_enable	rtl8139.c	/^	u32			msg_enable; $/;"	m	struct:rtl8139_private	file:
multicast_filter_limit	8139too.c	/^static int multicast_filter_limit = 32;$/;"	v	file:
multicast_filter_limit	rtl8139.c	/^static int multicast_filter_limit = 32;$/;"	v	file:
name	8139too.c	/^	const char *name;$/;"	m	struct:__anon3	file:
name	8139too.c	/^	const char *name;$/;"	m	struct:__anon6	file:
name	rtl8139.c	/^	const char *name;$/;"	m	struct:__anon12	file:
name	rtl8139.c	/^	const char *name;$/;"	m	struct:__anon9	file:
napi	8139too.c	/^	struct napi_struct	napi;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::napi_struct	file:
napi	rtl8139.c	/^	struct napi_struct	napi; \/* Structure for NAPI scheduling similar to tasklet but with weighting *\/ $/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::napi_struct	file:
netdev_ioctl	8139too.c	/^static int netdev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)$/;"	f	file:
next_tick	8139too.c	/^static int next_tick = 3 * HZ;$/;"	v	file:
obj-m	Makefile	/^obj-m :=rtl8139.o$/;"	m
packets	8139too.c	/^	u64	packets;$/;"	m	struct:rtl8139_stats	file:
packets	rtl8139.c	/^	u64	packets;$/;"	m	struct:rtl8139_stats	file:
param	8139too.c	/^static const unsigned long param[4][4] = {$/;"	v	file:
pci_dev	8139too.c	/^	struct pci_dev		*pci_dev;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::pci_dev	file:
pci_dev	rtl8139.c	/^	struct pci_dev		*pci_dev;    \/*PCI device *\/$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::pci_dev	file:
phys	8139too.c	/^	signed char		phys[4];	\/* MII device addresses. *\/$/;"	m	struct:rtl8139_private	file:
phys	rtl8139.c	/^	signed char		phys[4];	\/* MII device addresses. *\/$/;"	m	struct:rtl8139_private	file:
pr_fmt	8139too.c	92;"	d	file:
read_eeprom	8139too.c	/^static int read_eeprom(void __iomem *ioaddr, int location, int addr_len)$/;"	f	file:
read_eeprom	rtl8139.c	/^static int read_eeprom(void __iomem *ioaddr, int location, int addr_len)$/;"	f	file:
regs_len	8139too.c	/^	unsigned int		regs_len;$/;"	m	struct:rtl8139_private	file:
regs_len	rtl8139.c	/^	unsigned int		regs_len;$/;"	m	struct:rtl8139_private	file:
rtl8139_change_mtu	8139too.c	/^static int rtl8139_change_mtu(struct net_device *dev, int new_mtu)$/;"	f	file:
rtl8139_chip_reset	8139too.c	/^static void rtl8139_chip_reset (void __iomem *ioaddr)$/;"	f	file:
rtl8139_chip_reset	rtl8139.c	/^static void rtl8139_chip_reset (void __iomem *ioaddr)$/;"	f	file:
rtl8139_cleanup_module	8139too.c	/^module_exit(rtl8139_cleanup_module);$/;"	v
rtl8139_cleanup_module	8139too.c	/^static void __exit rtl8139_cleanup_module (void)$/;"	f	file:
rtl8139_cleanup_module	rtl8139.c	/^module_exit(rtl8139_cleanup_module);$/;"	v
rtl8139_cleanup_module	rtl8139.c	/^static void __exit rtl8139_cleanup_module (void)$/;"	f	file:
rtl8139_close	8139too.c	/^static int rtl8139_close (struct net_device *dev)$/;"	f	file:
rtl8139_ethtool_ops	8139too.c	/^static const struct ethtool_ops rtl8139_ethtool_ops = {$/;"	v	typeref:struct:ethtool_ops	file:
rtl8139_ethtool_ops	8139too.c	/^static const struct ethtool_ops rtl8139_ethtool_ops;$/;"	v	typeref:struct:ethtool_ops	file:
rtl8139_get_drvinfo	8139too.c	/^static void rtl8139_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)$/;"	f	file:
rtl8139_get_ethtool_stats	8139too.c	/^static void rtl8139_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)$/;"	f	file:
rtl8139_get_link	8139too.c	/^static u32 rtl8139_get_link(struct net_device *dev)$/;"	f	file:
rtl8139_get_msglevel	8139too.c	/^static u32 rtl8139_get_msglevel(struct net_device *dev)$/;"	f	file:
rtl8139_get_regs	8139too.c	/^static void rtl8139_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *regbuf)$/;"	f	file:
rtl8139_get_regs_len	8139too.c	/^static int rtl8139_get_regs_len(struct net_device *dev)$/;"	f	file:
rtl8139_get_settings	8139too.c	/^static int rtl8139_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)$/;"	f	file:
rtl8139_get_sset_count	8139too.c	/^static int rtl8139_get_sset_count(struct net_device *dev, int sset)$/;"	f	file:
rtl8139_get_stats64	8139too.c	/^rtl8139_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)$/;"	f	file:
rtl8139_get_strings	8139too.c	/^static void rtl8139_get_strings(struct net_device *dev, u32 stringset, u8 *data)$/;"	f	file:
rtl8139_get_wol	8139too.c	/^static void rtl8139_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)$/;"	f	file:
rtl8139_hw_start	8139too.c	/^static void rtl8139_hw_start (struct net_device *dev)$/;"	f	file:
rtl8139_hw_start	rtl8139.c	/^static void rtl8139_hw_start (struct net_device *dev)$/;"	f	file:
rtl8139_init_board	8139too.c	/^static struct net_device *rtl8139_init_board(struct pci_dev *pdev)$/;"	f	file:
rtl8139_init_board	rtl8139.c	/^static struct net_device *rtl8139_init_board(struct pci_dev *pdev)$/;"	f	file:
rtl8139_init_module	8139too.c	/^module_init(rtl8139_init_module);$/;"	v
rtl8139_init_module	8139too.c	/^static int __init rtl8139_init_module (void)$/;"	f	file:
rtl8139_init_module	rtl8139.c	/^module_init(rtl8139_init_module);$/;"	v
rtl8139_init_module	rtl8139.c	/^static int __init rtl8139_init_module (void)$/;"	f	file:
rtl8139_init_one	8139too.c	/^static int rtl8139_init_one(struct pci_dev *pdev,$/;"	f	file:
rtl8139_init_one	rtl8139.c	/^static int  rtl8139_init_one(struct pci_dev *pdev, const struct pci_device_id *ent)$/;"	f	file:
rtl8139_init_ring	8139too.c	/^static void rtl8139_init_ring (struct net_device *dev)$/;"	f	file:
rtl8139_init_ring	rtl8139.c	/^static void rtl8139_init_ring (struct net_device *dev)$/;"	f	file:
rtl8139_interrupt	8139too.c	/^static irqreturn_t rtl8139_interrupt (int irq, void *dev_instance)$/;"	f	file:
rtl8139_interrupt	rtl8139.c	/^static irqreturn_t rtl8139_interrupt (int irq, void *dev_instance)$/;"	f	file:
rtl8139_intr_mask	8139too.c	/^static const u16 rtl8139_intr_mask =$/;"	v	file:
rtl8139_intr_mask	rtl8139.c	/^static const u16 rtl8139_intr_mask =$/;"	v	file:
rtl8139_isr_ack	8139too.c	/^static void rtl8139_isr_ack(struct rtl8139_private *tp)$/;"	f	file:
rtl8139_netdev_ops	8139too.c	/^static const struct net_device_ops rtl8139_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
rtl8139_netdev_ops	rtl8139.c	/^static const struct net_device_ops rtl8139_netdev_ops = {$/;"	v	typeref:struct:net_device_ops	file:
rtl8139_norx_intr_mask	8139too.c	/^static const u16 rtl8139_norx_intr_mask =$/;"	v	file:
rtl8139_norx_intr_mask	rtl8139.c	/^static const u16 rtl8139_norx_intr_mask =$/;"	v	file:
rtl8139_nway_reset	8139too.c	/^static int rtl8139_nway_reset(struct net_device *dev)$/;"	f	file:
rtl8139_open	8139too.c	/^static int rtl8139_open (struct net_device *dev)$/;"	f	file:
rtl8139_open	rtl8139.c	/^static int rtl8139_open (struct net_device *dev)$/;"	f	file:
rtl8139_pci_driver	8139too.c	/^static struct pci_driver rtl8139_pci_driver = {$/;"	v	typeref:struct:pci_driver	file:
rtl8139_pci_driver	rtl8139.c	/^static struct pci_driver rtl8139_pci_driver = {$/;"	v	typeref:struct:pci_driver	file:
rtl8139_pci_tbl	8139too.c	/^static const struct pci_device_id rtl8139_pci_tbl[] = {$/;"	v	typeref:struct:pci_device_id	file:
rtl8139_pci_tbl	rtl8139.c	/^static const struct pci_device_id rtl8139_pci_tbl[] = {$/;"	v	typeref:struct:pci_device_id	file:
rtl8139_poll	8139too.c	/^static int rtl8139_poll(struct napi_struct *napi, int budget)$/;"	f	file:
rtl8139_poll_controller	8139too.c	/^static void rtl8139_poll_controller(struct net_device *dev)$/;"	f	file:
rtl8139_private	8139too.c	/^struct rtl8139_private {$/;"	s	file:
rtl8139_private	rtl8139.c	/^struct rtl8139_private {$/;"	s	file:
rtl8139_remove_one	8139too.c	/^static void rtl8139_remove_one(struct pci_dev *pdev)$/;"	f	file:
rtl8139_remove_one	rtl8139.c	/^static void rtl8139_remove_one(struct pci_dev *dev)$/;"	f	file:
rtl8139_resume	8139too.c	/^static int rtl8139_resume (struct pci_dev *pdev)$/;"	f	file:
rtl8139_rx	8139too.c	/^static int rtl8139_rx(struct net_device *dev, struct rtl8139_private *tp,$/;"	f	file:
rtl8139_rx_config	8139too.c	/^static const unsigned int rtl8139_rx_config =$/;"	v	file:
rtl8139_rx_config	rtl8139.c	/^static const unsigned int rtl8139_rx_config =$/;"	v	file:
rtl8139_rx_err	8139too.c	/^static void rtl8139_rx_err (u32 rx_status, struct net_device *dev,$/;"	f	file:
rtl8139_set_features	8139too.c	/^static int rtl8139_set_features(struct net_device *dev, netdev_features_t features)$/;"	f	file:
rtl8139_set_mac_address	8139too.c	/^static int rtl8139_set_mac_address(struct net_device *dev, void *p)$/;"	f	file:
rtl8139_set_msglevel	8139too.c	/^static void rtl8139_set_msglevel(struct net_device *dev, u32 datum)$/;"	f	file:
rtl8139_set_rx_mode	8139too.c	/^static void rtl8139_set_rx_mode (struct net_device *dev)$/;"	f	file:
rtl8139_set_rx_mode	rtl8139.c	/^static void rtl8139_set_rx_mode (struct net_device *dev)$/;"	f	file:
rtl8139_set_settings	8139too.c	/^static int rtl8139_set_settings(struct net_device *dev, struct ethtool_cmd *cmd)$/;"	f	file:
rtl8139_set_wol	8139too.c	/^static int rtl8139_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)$/;"	f	file:
rtl8139_start_thread	8139too.c	/^static void rtl8139_start_thread(struct rtl8139_private *tp)$/;"	f	file:
rtl8139_start_thread	rtl8139.c	/^static void rtl8139_start_thread(struct rtl8139_private *tp)$/;"	f	file:
rtl8139_start_xmit	8139too.c	/^static netdev_tx_t rtl8139_start_xmit (struct sk_buff *skb,$/;"	f	file:
rtl8139_stats	8139too.c	/^struct rtl8139_stats {$/;"	s	file:
rtl8139_stats	rtl8139.c	/^struct rtl8139_stats {$/;"	s	file:
rtl8139_suspend	8139too.c	/^static int rtl8139_suspend (struct pci_dev *pdev, pm_message_t state)$/;"	f	file:
rtl8139_thread	8139too.c	/^static void rtl8139_thread (struct work_struct *work)$/;"	f	file:
rtl8139_thread	rtl8139.c	/^static void rtl8139_thread (struct work_struct *work)$/;"	f	file:
rtl8139_thread_iter	8139too.c	/^static inline void rtl8139_thread_iter (struct net_device *dev,$/;"	f	file:
rtl8139_thread_iter	rtl8139.c	/^static inline void rtl8139_thread_iter (struct net_device *dev,$/;"	f	file:
rtl8139_tune_twister	8139too.c	/^static inline void rtl8139_tune_twister (struct net_device *dev,$/;"	f	file:
rtl8139_tune_twister	8139too.c	/^static void rtl8139_tune_twister (struct net_device *dev,$/;"	f	file:
rtl8139_tx_clear	8139too.c	/^static inline void rtl8139_tx_clear (struct rtl8139_private *tp)$/;"	f	file:
rtl8139_tx_config	8139too.c	/^static const unsigned int rtl8139_tx_config =$/;"	v	file:
rtl8139_tx_config	rtl8139.c	/^static const unsigned int rtl8139_tx_config =$/;"	v	file:
rtl8139_tx_interrupt	8139too.c	/^static void rtl8139_tx_interrupt (struct net_device *dev,$/;"	f	file:
rtl8139_tx_interrupt	rtl8139.c	/^static void rtl8139_tx_interrupt (struct net_device *dev,$/;"	f	file:
rtl8139_tx_timeout	8139too.c	/^static void rtl8139_tx_timeout (struct net_device *dev)$/;"	f	file:
rtl8139_tx_timeout_task	8139too.c	/^static void rtl8139_tx_timeout_task (struct work_struct *work)$/;"	f	file:
rtl8139_tx_timeout_task	rtl8139.c	/^static void rtl8139_tx_timeout_task (struct work_struct *work)$/;"	f	file:
rtl8139_weird_interrupt	8139too.c	/^static void rtl8139_weird_interrupt (struct net_device *dev,$/;"	f	file:
rtl8139_weird_interrupt	rtl8139.c	/^static void rtl8139_weird_interrupt (struct net_device *dev,$/;"	f	file:
rtl_check_media	8139too.c	/^static void rtl_check_media (struct net_device *dev, unsigned int init_media)$/;"	f	file:
rtl_check_media	rtl8139.c	/^static void rtl_check_media (struct net_device *dev, unsigned int init_media)$/;"	f	file:
rtl_chip_info	8139too.c	/^} rtl_chip_info[] = {$/;"	v	typeref:struct:__anon6	file:
rtl_chip_info	rtl8139.c	/^} rtl_chip_info[] = {$/;"	v	typeref:struct:__anon12	file:
rtl_extra_stats	8139too.c	/^struct rtl_extra_stats {$/;"	s	file:
rtl_extra_stats	rtl8139.c	/^struct rtl_extra_stats {$/;"	s	file:
rx_config	8139too.c	/^	u32			rx_config;$/;"	m	struct:rtl8139_private	file:
rx_config	rtl8139.c	/^	u32			rx_config;$/;"	m	struct:rtl8139_private	file:
rx_lock	8139too.c	/^	spinlock_t		rx_lock;$/;"	m	struct:rtl8139_private	file:
rx_lock	rtl8139.c	/^	spinlock_t		rx_lock;$/;"	m	struct:rtl8139_private	file:
rx_lost_in_ring	8139too.c	/^	unsigned long rx_lost_in_ring;$/;"	m	struct:rtl_extra_stats	file:
rx_lost_in_ring	rtl8139.c	/^	unsigned long rx_lost_in_ring;$/;"	m	struct:rtl_extra_stats	file:
rx_mode_bits	8139too.c	/^enum rx_mode_bits {$/;"	g	file:
rx_ring	8139too.c	/^	unsigned char		*rx_ring;$/;"	m	struct:rtl8139_private	file:
rx_ring	rtl8139.c	/^	unsigned char		*rx_ring;$/;"	m	struct:rtl8139_private	file:
rx_ring_dma	8139too.c	/^	dma_addr_t		rx_ring_dma;$/;"	m	struct:rtl8139_private	file:
rx_ring_dma	rtl8139.c	/^	dma_addr_t		rx_ring_dma;$/;"	m	struct:rtl8139_private	file:
rx_stats	8139too.c	/^	struct rtl8139_stats	rx_stats;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::rtl8139_stats	file:
rx_stats	rtl8139.c	/^	struct rtl8139_stats	rx_stats;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::rtl8139_stats	file:
str	8139too.c	/^	const char str[ETH_GSTRING_LEN];$/;"	m	struct:__anon4	file:
str	rtl8139.c	/^	const char str[ETH_GSTRING_LEN];$/;"	m	struct:__anon10	file:
syncp	8139too.c	/^	struct u64_stats_sync	syncp;$/;"	m	struct:rtl8139_stats	typeref:struct:rtl8139_stats::u64_stats_sync	file:
syncp	rtl8139.c	/^	struct u64_stats_sync	syncp;$/;"	m	struct:rtl8139_stats	typeref:struct:rtl8139_stats::u64_stats_sync	file:
thread	8139too.c	/^	struct delayed_work	thread;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::delayed_work	file:
thread	rtl8139.c	/^	struct delayed_work	thread;  \/*types of work structure *\/$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::delayed_work	file:
twist_col	8139too.c	/^	char			twistie, twist_row, twist_col;$/;"	m	struct:rtl8139_private	file:
twist_col	rtl8139.c	/^	char			twistie, twist_row, twist_col;$/;"	m	struct:rtl8139_private	file:
twist_row	8139too.c	/^	char			twistie, twist_row, twist_col;$/;"	m	struct:rtl8139_private	file:
twist_row	rtl8139.c	/^	char			twistie, twist_row, twist_col;$/;"	m	struct:rtl8139_private	file:
twistie	8139too.c	/^	char			twistie, twist_row, twist_col;$/;"	m	struct:rtl8139_private	file:
twistie	rtl8139.c	/^	char			twistie, twist_row, twist_col;$/;"	m	struct:rtl8139_private	file:
tx_buf	8139too.c	/^	unsigned char		*tx_buf[NUM_TX_DESC];	\/* Tx bounce buffers *\/$/;"	m	struct:rtl8139_private	file:
tx_buf	rtl8139.c	/^	unsigned char		*tx_buf[NUM_TX_DESC];	\/* Tx bounce buffers *\/$/;"	m	struct:rtl8139_private	file:
tx_buf_mapped	8139too.c	/^	unsigned long tx_buf_mapped;$/;"	m	struct:rtl_extra_stats	file:
tx_buf_mapped	rtl8139.c	/^	unsigned long tx_buf_mapped;$/;"	m	struct:rtl_extra_stats	file:
tx_bufs	8139too.c	/^	unsigned char		*tx_bufs;	\/* Tx bounce buffer region. *\/$/;"	m	struct:rtl8139_private	file:
tx_bufs	rtl8139.c	/^	unsigned char		*tx_bufs;	\/* Tx bounce buffer region. *\/$/;"	m	struct:rtl8139_private	file:
tx_bufs_dma	8139too.c	/^	dma_addr_t		tx_bufs_dma;$/;"	m	struct:rtl8139_private	file:
tx_bufs_dma	rtl8139.c	/^	dma_addr_t		tx_bufs_dma;$/;"	m	struct:rtl8139_private	file:
tx_config_bits	8139too.c	/^enum tx_config_bits {$/;"	g	file:
tx_config_bits	rtl8139.c	/^enum tx_config_bits {$/;"	g	file:
tx_flag	8139too.c	/^	unsigned int		tx_flag;$/;"	m	struct:rtl8139_private	file:
tx_flag	rtl8139.c	/^	unsigned int		tx_flag;  \/*tx_flag shall contain transmission flags to notify the device*\/$/;"	m	struct:rtl8139_private	file:
tx_stats	8139too.c	/^	struct rtl8139_stats	tx_stats;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::rtl8139_stats	file:
tx_stats	rtl8139.c	/^	struct rtl8139_stats	tx_stats;  $/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::rtl8139_stats	file:
tx_timeouts	8139too.c	/^	unsigned long tx_timeouts;$/;"	m	struct:rtl_extra_stats	file:
tx_timeouts	rtl8139.c	/^	unsigned long tx_timeouts;$/;"	m	struct:rtl_extra_stats	file:
use_io	8139too.c	/^static bool use_io = false;$/;"	v	file:
use_io	8139too.c	/^static bool use_io = true;$/;"	v	file:
use_io	rtl8139.c	/^static bool use_io = false;$/;"	v	file:
use_io	rtl8139.c	/^static bool use_io = true;$/;"	v	file:
version	8139too.c	/^	u32 version; \/* from RTL8139C\/RTL8139D docs *\/$/;"	m	struct:__anon6	file:
version	rtl8139.c	/^	u32 version; \/* from RTL8139C\/RTL8139D docs *\/$/;"	m	struct:__anon12	file:
watchdog_fired	8139too.c	/^	unsigned int		watchdog_fired : 1;$/;"	m	struct:rtl8139_private	file:
watchdog_fired	rtl8139.c	/^	unsigned int		watchdog_fired : 1;$/;"	m	struct:rtl8139_private	file:
wrap_copy	8139too.c	/^static inline void wrap_copy(struct sk_buff *skb, const unsigned char *ring,$/;"	f	file:
xstats	8139too.c	/^	struct rtl_extra_stats	xstats;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::rtl_extra_stats	file:
xstats	rtl8139.c	/^	struct rtl_extra_stats	xstats;$/;"	m	struct:rtl8139_private	typeref:struct:rtl8139_private::rtl_extra_stats	file:
